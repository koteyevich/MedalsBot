using MedalsBot.Interfaces;
using Telegram.Bot;
using Telegram.Bot.Types;

namespace MedalsBot.Commands
{
    public class CommandRegistry
    {
        private readonly Dictionary<string, ICommand> commands = new();
        private readonly Database? db;

        public CommandRegistry(Database? db = null)
        {
            this.db = db;

            var commandList = new List<ICommand>
            {
                new GiveMedalka(),
                new MyMedalki(),
                new Start(),
                // Add more commands here
            };

            foreach (var command in commandList)
            {
                commands[command.Name.ToLower()] = command;

                foreach (string alias in command.Aliases)
                {
                    commands[alias.ToLower()] = command;
                }
            }
        }


        public async Task HandleCommandAsync(Message message, TelegramBotClient? bot)
        {
            if (string.IsNullOrEmpty(message.Text))
                return;

            string commandText = message.Text.Split(' ')[0].ToLower();

            string normalizedCommand = commandText.Split('@')[0];

            var matchingCommand = commands
                .FirstOrDefault(kvp => normalizedCommand.StartsWith(kvp.Key));

            if (matchingCommand.Value != null)
            {
                await matchingCommand.Value.ExecuteAsync(message, bot, db);
            }
            else if (normalizedCommand.StartsWith("/help"))
            {
                await SendHelpMessage(message, bot);
            }
        }

        public async Task SendHelpMessage(Message message, TelegramBotClient? bot)
        {
            string helpMessage = "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n";
            var listed = new HashSet<ICommand>();

            foreach (var command in commands.Values.Distinct())
            {
                if (!listed.Add(command)) continue;

                string aliasText = command.Aliases.Length > 0
                    ? $" ({string.Join(", ", command.Aliases)})"
                    : "";

                helpMessage += $"{command.Name}{aliasText} - {command.Description}\n";
            }

            helpMessage += "\n";
            helpMessage += "<b>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–µ–¥–∞–ª–µ–∫:</b>\n" +
                           "<i>TLDR; 5 - —Ö—É–¥—à–∞—è, –±—Ä–æ–Ω–∑–∞; 1 - –ª—É—á—à–∞—è, —Ç—Ä–æ—Ñ–µ–π</i>\n" +
                           "<b>1 (üèÜ)</b> - <i>—Ç—Ä–æ—Ñ–µ–π, –ª–µ–≥–µ–Ω–¥–∞ —á–∞—Ç–∞</i>\n" +
                           "<b>2 (üéñ)</b> - <i>–æ—Ä–¥–µ–Ω, –±–∞–∑–∞</i>\n" +
                           "<b>3 (ü•á)</b> - <i>–∑–æ–ª–æ—Ç–æ, –ª—É—á—à–∏–π</i>\n" +
                           "<b>4 (ü•à)</b> - <i>—Å–µ—Ä–µ–±—Ä–æ, –∫—Ä—É—Ç–æ–π —á–µ–ª–∏–∫</i>\n" +
                           "<b>5 (ü•â)</b> - <i>–±—Ä–æ–Ω–∑–∞, –Ω–µ–ø–ª–æ—Ö–æ —Å–∫–∞–∑–∞–Ω–æ</i>\n";

            helpMessage += "\n";
            helpMessage += "<b>–ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –±–æ—Ç–∞</b>\n" +
                           "- –ù–µ –¥–∞–≤–∞—Ç—å –∏ –Ω–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å –º–µ–¥–∞–ª—å–∫–∞–º–∏ –±–µ–∑ —Å–º—ã—Å–ª–∞!\n" +
                           "- –î–∞–≤–∞–π—Ç–µ –º–µ–¥–∞–ª—å–∫–∏ –∑–∞ –∫–ª–∞—Å—Å–Ω—ã–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è!\n" +
                           "<i>–≠—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –Ω–æ –Ω–µ –∑–Ω–∞—á–∏—Ç —á—Ç–æ –º—ã –º–æ–∂–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∞—Å :)</i>";

            if (bot != null)
            {
                await bot.SendMessage(message.Chat.Id, helpMessage, Telegram.Bot.Types.Enums.ParseMode.Html,
                    linkPreviewOptions: new LinkPreviewOptions { IsDisabled = true });
            }
        }

        public IReadOnlyDictionary<string, ICommand> Commands => commands.AsReadOnly();
    }
}
