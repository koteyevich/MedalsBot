using MedalsBot.Models;
using Telegram.Bot;
using Telegram.Bot.Types;

namespace MedalsBot.Processors;

public abstract class GiveMedalkaProcessor
{
    public static async Task ProcessGiveMedalkaAsync(Message message, TelegramBotClient? bot, Database? db)
    {
        if (message.ReplyToMessage?.From == null)
        {
            if (bot != null)
                await bot.SendMessage(message.Chat.Id,
                    "–¢–µ–±–µ –Ω–∞–¥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ—Ç–æ—Ä–æ–º—É —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–¥–∞—Ä–∏—Ç—å –º–µ–¥–∞–ª—å.");
            return;
        }

        if (message.From != null && message.From.Id == message.ReplyToMessage.From.Id)
        {
            if (bot != null)
                await bot.SendMessage(message.Chat.Id, "–°–∞–º–æ–ª–µ—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–¥–Ω—ã–º –¥–ª—è –≤–∞—à–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è.");
            return;
        }

        var parts = message.Text?.Split(' ', 3);

        if (parts == null || parts.Length < 2)
        {
            if (bot != null)
                await bot.SendMessage(message.Chat.Id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /givemedalka (1,2,3,4,5) <—Å–æ–æ–±—â–µ–Ω–∏–µ>");
            return;
        }

        if (!int.TryParse(parts[1], out var medalTypeInt) || medalTypeInt is < 1 or > 5)
        {
            if (bot != null)
                await bot.SendMessage(message.Chat.Id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –º–µ–¥–∞–ª–∏. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–∏—Ñ—Ä–æ–π –æ—Ç 1 –¥–æ 5.");
            return;
        }

        var medalType = (MedalType)medalTypeInt;
        var explanation = parts.Length >= 3 && !string.IsNullOrWhiteSpace(parts[2])
            ? parts[2]
            : "<i>null</i>"; // fallback when explanation is missing or empty
        var originalMessageText = message.ReplyToMessage.Text ?? "<i>–Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</i>";

        // recipient info from the replied-to message
        var recipientUserId = message.ReplyToMessage.From.Id;
        var recipientUsername = message.ReplyToMessage.From.Username;
        var chatId = message.Chat.Id;

        db?.AddMedal(recipientUserId, chatId, recipientUsername, medalType, explanation, originalMessageText);

        var medalTypeDictionary = new Dictionary<MedalType, string>
        {
            { MedalType.Bronze, "ü•â" },
            { MedalType.Silver, "ü•à" },
            { MedalType.Gold, "ü•á" },
            { MedalType.OrdenMedal, "üéñ" },
            { MedalType.Trophy, "üèÜ" }
        };

        if (bot != null)
            await bot.SendMessage(message.Chat.Id,
                $"–ú–µ–¥–∞–ª—å {medalTypeDictionary[medalType]} –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∞ {recipientUsername ?? recipientUserId.ToString()} —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n\"{explanation}\"",
                Telegram.Bot.Types.Enums.ParseMode.Html);
    }
}